"""
Django settings for data_manager project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import ldap
from django_auth_ldap.config import LDAPSearch, PosixGroupType

import logging
logger = logging.getLogger('development')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4gj=#0w9uavm1u&)13h0+!%41g#c2)$t6iwri&z3j=amu(wc^7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'data_manager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'data_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_manager.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja-JP'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/master-data/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '../static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Use admin:login as default authentication
LOGIN_URL='admin:login'
LOGOUT_REDIRECT_URL='/'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'masterdata',
        'USER': 'masterdata',
        'PASSWORD': os.environ['APP_CONFIG_MASTERDATAMANAGERJDBCPASSWORD'],
        'HOST': 'database',
        'PORT': '3306',
#        'OPTIONS': {
#            'read_default_file': '/path/to/my.cnf',
#        },
    }
}

ALLOWED_HOSTS = ['*']

AUTH_LDAP_SERVER_URI = "ldap://ldap"
AUTH_LDAP_ALWAYS_UPDATE_USER = True
# AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}
AUTH_LDAP_BIND_DN = "cn=admin,dc=xxx,dc=acnshared,dc=com"
AUTH_LDAP_BIND_PASSWORD = os.environ.get('AUTH_LDAP_BIND_PASSWORD')
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "ou=people,dc=xxx,dc=acnshared,dc=com", ldap.SCOPE_SUBTREE, "(cn=%(user)s)"
)
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "cn",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

# Keep ModelBackend around for per-user permissions and maybe a local superuser.
# Note that the order of the backends matter.
# By specifying the ModelBackend first in the list, it means that authentication
# requests will first attempt to authenticate towards our database,
# and after that try to authenticate using LDAP towards our Active Directory instance.
AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# ...associations between ldap and django groups
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=adip-active,ou=groups,dc=xxx,dc=acnshared,dc=com",
    "is_staff": "cn=adip-staff,ou=groups,dc=xxx,dc=acnshared,dc=com",
    "is_superuser": "cn=adip-superuser,ou=groups,dc=xxx,dc=acnshared,dc=com"
}

# If True, LDAPBackend will furnish group permissions based on the LDAP groups the authenticated user belongs to.
# AUTH_LDAP_GROUP_SEARCH and AUTH_LDAP_GROUP_TYPE must also be set.
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=groups,dc=xxx,dc=acnshared,dc=com",
                                    ldap.SCOPE_SUBTREE,  # allow searching from current node to all nodes below
                                    "(objectClass=posixGroup)"  # type of object
)
# a posixGroup is identified by the keyword "cn" into ldap server
AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr="cn")   # default name_attr="cn"

# ...simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "cn=enabled,ou=groups,dc=whiteqube"
# AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=groups,dc=whiteqube"
# AUTH_LDAP_PROFILE_ATTR_MAP = {
#     "home_directory": "homeDirectory"
# }
#
# AUTH_LDAP_PROFILE_FLAGS_BY_GROUPS = {
#     "is_awesome": ["cn=awesome,ou=groups,dc=whiteqube"]
# }

# # Enable debug for ldap server connection
logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)

CSRF_TRUSTED_ORIGINS = [
    'https://xxx.acnshared.com'
]
